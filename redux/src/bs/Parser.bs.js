// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Char from "../../node_modules/bs-platform/lib/es6/char.js";
import * as Caml_string from "../../node_modules/bs-platform/lib/es6/caml_string.js";

function next_char(s, i) {
  if (i < s.length) {
    return Caml_string.get(s, i);
  }
  
}

var letters = /[a-z]/;

function lexer$prime(term, _i, _seen) {
  while(true) {
    var seen = _seen;
    var i = _i;
    console.log(term);
    var x = next_char(term, i);
    if (x === undefined) {
      return {
              hd: /* EOF */0,
              tl: /* [] */0
            };
    }
    if (letters.test(Char.escaped(x))) {
      _seen = seen + Char.escaped(x);
      _i = i + 1 | 0;
      continue ;
    }
    if (seen !== "") {
      return {
              hd: /* ID */{
                _0: seen
              },
              tl: lexer$prime(term, i, "")
            };
    }
    var t;
    if (x >= 47) {
      t = x !== 92 ? /* GARBAGE */5 : /* LAMBDA */1;
    } else if (x >= 40) {
      switch (x - 40 | 0) {
        case 0 :
            t = /* LBRACKET */2;
            break;
        case 1 :
            t = /* RBRACKET */3;
            break;
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            t = /* GARBAGE */5;
            break;
        case 6 :
            t = /* DOT */4;
            break;
        
      }
    } else {
      t = /* GARBAGE */5;
    }
    if (t !== /* GARBAGE */5) {
      return {
              hd: t,
              tl: lexer$prime(term, i + 1 | 0, "")
            };
    }
    _seen = "";
    _i = i + 1 | 0;
    continue ;
  };
}

function lexer(term) {
  return lexer$prime(term, 0, "");
}

export {
  next_char ,
  letters ,
  lexer$prime ,
  lexer ,
  
}
/* No side effect */
