// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../../node_modules/bs-platform/lib/es6/curry.js";
import * as $$String from "../../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_js_exceptions from "../../node_modules/bs-platform/lib/es6/caml_js_exceptions.js";

function split(_s, c) {
  while(true) {
    var s = _s;
    console.log(s);
    var exit = 0;
    var n;
    try {
      n = $$String.index(s, c);
      exit = 1;
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Not_found") {
        return {
                hd: s,
                tl: /* [] */0
              };
      }
      throw exn;
    }
    if (exit === 1) {
      var m1 = $$String.sub(s, 0, n);
      var exit$1 = 0;
      var m2;
      try {
        m2 = $$String.sub(s, n + 1 | 0, (s.length - n | 0) - 1 | 0);
        exit$1 = 2;
      }
      catch (raw_exn$1){
        var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
        if (exn$1.RE_EXN_ID === "Invalid_argument") {
          return {
                  hd: m1,
                  tl: /* [] */0
                };
        }
        throw exn$1;
      }
      if (exit$1 === 2) {
        if (m1 !== "") {
          return {
                  hd: m1,
                  tl: split(m2, c)
                };
        }
        _s = m2;
        continue ;
      }
      
    }
    
  };
}

function print_list$prime(xs, f) {
  if (xs) {
    return Curry._1(f, xs.hd) + "," + print_list$prime(xs.tl, f);
  } else {
    return ", ";
  }
}

function print_list(xs, f) {
  var printed = print_list$prime(xs, f);
  return "[" + $$String.sub(printed, 0, printed.length - 3 | 0) + "]";
}

export {
  split ,
  print_list$prime ,
  print_list ,
  
}
/* No side effect */
